---
title: "Final-Project"
author: "Drew Marchant & Joe Uttecht"
format: html
editor: visual
---

## NBA EDA

#### Libraries

```{r}
library(readxl)
library(ggplot2)
library(plotly)
library(dplyr)
library(shiny)
library(readr)
library(stringi)
library(car)
library(MASS)
library(caret)
```

#### Read in Data

```{r}
Lineups <- read_excel("Lineups.xlsx")
Players <- read_excel("Players.xlsx")
Players_Info <- read_csv("Players.Info.csv")
```

#### Data Cleaning

```{r}
Players <- Players %>%
  mutate(Player = gsub("(^[A-Za-z'\\-])[A-Za-z'\\-]*\\s([A-Za-z]+)", "\\1. \\2", Player)) %>%
  mutate(Player = stri_trans_general(Player, "Latin-ASCII"))

Lineups <- Lineups %>%
  rename(
    PlusMinus = `+/-`,
    ThreePM = `3PM`,
    ThreePA = `3PA`,
    ThreePerc = `3P%`,
    ASTPerc = `AST%`,
    OREBPerc = `OREB%`,
    DREBPerc = `DREB%`,
    REBPerc = `REB%`,
    eFGPerc = `eFG%`,
    TSPerc = `TS%`,
    FTPerc = `FT%`,
    FGPerc = `FG%`,
    ASTtoTO = `AST/TO`,
    ASTRatio = `AST Ratio`,
    TORatio = `TO Ratio`
)


Players <- Players %>%
  rename(
    PlusMinus = `+/-`,
    ThreePM = `3PM`,
    ThreePA = `3PA`,
    ThreePerc = `3P%`,
    FTPerc = `FT%`,
    FGPerc = `FG%`
    
)

```

### EDA

```{r}
p <- ggplot(Lineups, aes(x = PlusMinus, y = PIE, text = paste("Lineup:", Lineups, "<br>team:", Team, "<br>+/-:", PlusMinus, "<br>PIE:", PIE))) + 
  geom_point() + 
  labs(title = "Correlation between +/- and PIE", 
       x = "Plus Minus", 
       y = "PIE") + 
  theme_minimal()

# Convert ggplot to plotly for interactive plot with tooltips
ggplotly(p, tooltip = "text")
```

```{r}
library(dplyr)
library(plotly)

# Assuming the dataset is named Lineups_Advanced
# Filter the top 10 lineups based on net_rtg
top_lineups <- Lineups %>%
  arrange(desc(NetRtg)) %>%
  slice(1:10) %>%
  select(Lineups, Team, NetRtg)

# Create a plotly table to display the best lineups based on net_rtg
plot_ly(
  type = 'table',
  header = list(
    values = c("Lineups", "Team", "Net Rating"),
    align = c('left', 'left', 'right'),
    line = list(width = 1, color = 'black'),
    fill = list(color = 'rgba(93, 164, 214, 0.8)'),
    font = list(size = 12, color = 'white')
  ),
  cells = list(
    values = rbind(top_lineups$Lineups, top_lineups$Team, top_lineups$NetRtg),
    align = c('left', 'left', 'right'),
    line = list(color = 'black', width = 1),
    fill = list(color = c('rgba(245, 245, 245, 0.8)', 'rgba(255, 255, 255, 0.8)')),
    font = list(size = 11, color = 'black')
  )
)
```

```{r}
# Load necessary libraries
library(car)
library(MASS)
library(caret)

# 1. Build the initial linear model and check for aliased coefficients
linear_model <- lm(PlusMinus ~ . - Lineups - Team - Min, data = Lineups)
summary(linear_model)

```

```{r}
# Check for aliased coefficients
alias_info <- alias(linear_model)
print("Aliased coefficients:")
print(alias_info)
```

```{r}
linear_model_updated <- lm(PlusMinus ~ . - Lineups - Team - REB - FTM - Min, data = Lineups)
summary(linear_model_updated)
```

```{r}
# Compute correlation matrix
cor_matrix <- cor(Lineups[, sapply(Lineups, is.numeric)])

# Create a correlation plot
library(corrplot)
corrplot(cor_matrix, method = "circle", col = colorRampPalette(c("blue", "white", "red"))(200))


```

```{r}
# Stepwise selection using AIC
stepwise_model <- step(lm(PlusMinus ~ . - Lineups - Team - REB - FTM, data = Lineups), direction = "both")
summary(stepwise_model)

```

```{r}
# Apply Lasso regularization (L1)
library(glmnet)
x <- model.matrix(PlusMinus ~ . - Lineups - Team - REB - FTM - Min, data = Lineups)[,-1] # remove intercept
y <- Lineups$PlusMinus
lasso_model <- cv.glmnet(x, y, alpha = 1)
plot(lasso_model)
best_lambda <- lasso_model$lambda.min
print(best_lambda)

```

Model Usability Check

```{r}
# Plot relationships
# plot(Lineups$X1, Lineups$PlusMinus)

# Check normality of residuals
model_residuals <- residuals(linear_model_updated)
qqnorm(model_residuals)
qqline(model_residuals)

# Plot residuals vs fitted values
plot(fitted(linear_model_updated), model_residuals)

library(lmtest)
dwtest(linear_model_updated)

```

```{r}
summary(linear_model_updated)
```
